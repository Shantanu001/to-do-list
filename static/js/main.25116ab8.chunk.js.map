{"version":3,"sources":["CompletedList.js","ToDoList.js","action/index.js","App.js","reducer/updateCompletedTaskList.js","reducer/index.js","store.js","index.js"],"names":["CompletedList","CompletedTaskList","useSelector","state","updateCompletedTaskList","color","map","el","index","ListGroup","Item","variant","className","ToDoList","dispatch","useDispatch","useState","task","setTask","taskList","setTaskList","useEffect","console","log","Container","Row","InputGroup","FormControl","id","placeholder","onChange","e","target","value","Button","onClick","newTaskList","push","document","getElementById","filter","type","payload","UpdateCompletedTask","removeTask","App","initialState","action","rootReducer","combineReducers","store","createStore","subscribe","getState","ReactDOM","render","StrictMode"],"mappings":"0VA6BeA,EAtBO,WAClB,IAAMC,EAAoBC,aAAY,SAACC,GAAD,OAASA,EAAMC,2BACjDC,EAAQ,CACR,UACA,YACA,UACA,SACA,UACA,OACA,QACA,QAGJ,OACI,8BACKJ,GAAmBA,EAAkBK,KAAI,SAACC,EAAGC,GAAJ,OACpC,cAACC,EAAA,EAAUC,KAAX,CAAiBC,QAASN,EAAMG,EAAM,GAAtC,SAA0C,sBAAMI,UAAU,gBAAhB,SAAiCL,YCyD9EM,EAjEE,WACf,IAAMC,EAAWC,cACbV,EAAQ,CACV,UACA,YACA,UACA,SACA,UACA,OACA,QACA,QAEF,EAAuBW,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KAkBA,OAJAC,qBAAU,WACRC,QAAQC,IAAIJ,KACX,CAACA,IAGF,eAACK,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKb,UAAU,UAAf,SACE,gDAEF,cAACa,EAAA,EAAD,CAAKb,UAAU,YAAf,SACE,eAACc,EAAA,EAAD,CAAYd,UAAU,OAAtB,UACE,cAACe,EAAA,EAAD,CACEC,GAAG,cACHC,YAAY,WACZ,aAAW,WACX,mBAAiB,eACjBC,SAAU,SAACC,GAAKb,EAAQa,EAAEC,OAAOC,UAEnC,cAACC,EAAA,EAAD,CAAQvB,QAAQ,oBAAoBiB,GAAG,gBAAgBO,QA9B/C,WACd,IAAIC,EAAW,YAAOjB,GACtBiB,EAAYC,KAAKpB,GACjBG,EAAYgB,GACZE,SAASC,eAAe,eAAeN,MAAM,IA0BvC,sBAKJ,cAACR,EAAA,EAAD,UACE,cAAChB,EAAA,EAAD,UACGU,GACCA,EAASb,KAAI,SAACC,EAAGC,GAAJ,OACX,cAACC,EAAA,EAAUC,KAAX,CAAgBC,QAASN,EAAMG,EAAM,GAAI2B,QAAS,YAjC3C,SAAClB,GAClB,IAAImB,EAAW,YAAOjB,GACtBiB,EAAcA,EAAYI,QAAO,SAAAjC,GAAE,OAAIA,IAAOU,KAC9CG,EAAYgB,GACZtB,ECxC+B,SAACG,GAClC,MAAO,CACLwB,KAAM,wBACNC,QAASzB,GDqCA0B,CAAoB1B,IA6BoC2B,CAAWrC,IAAlE,SAA0EA,WAIlF,cAACkB,EAAA,EAAD,UACE,cAAC,EAAD,UE/DOoB,MARf,WACE,OACI,qBAAKjC,UAAU,MAAf,SACA,cAAC,EAAD,mB,gBCNAkC,EAAe,GAWN1C,EATiB,WAA8B,IAA7BD,EAA4B,uDAAtB2C,EAAaC,EAAS,uCACzD,MACS,0BADFA,EAAON,KAEA,GAAN,mBAAWtC,GAAX,CAAiB4C,EAAOL,UAEjBvC,GCFJ6C,EAFKC,YAAgB,CAAE7C,4BCGvB8C,EAFDC,YAAYH,GCI1BE,EAAME,WAAU,WAAK9B,QAAQC,IAAI2B,EAAMG,eAEvCC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACA,cAAC,IAAMM,WAAP,UACE,cAAC,EAAD,QAGFlB,SAASC,eAAe,W","file":"static/js/main.25116ab8.chunk.js","sourcesContent":["import React,{useState} from \"react\";\nimport {Container,Row,Col,ListGroup} from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport \"./CompletedList.css\";\n\n\n\nconst CompletedList = () => {\n    const CompletedTaskList = useSelector((state)=>state.updateCompletedTaskList);\n    let color = [\n        \"primary\",\n        \"secondary\",\n        \"success\",\n        \"danger\",\n        \"warning\",\n        \"info\",\n        \"light\",\n        \"dark\",\n      ];\n\n    return (\n        <div>\n            {CompletedTaskList&&CompletedTaskList.map((el,index) => (\n                  <ListGroup.Item  variant={color[index%7]}><span className=\"completedTask\">{el}</span></ListGroup.Item>\n            ))}\n        </div>\n    );\n};\n\nexport default CompletedList;","import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Row,\n  InputGroup,\n  FormControl,\n  Button,\n  ListGroup,\n} from \"react-bootstrap\";\nimport \"./ToDoList.css\";\nimport CompletedList from './CompletedList';\nimport { useDispatch } from \"react-redux\";\nimport { UpdateCompletedTask } from \"./action\";\n\n\nconst ToDoList = () => {\n  const dispatch = useDispatch();\n  let color = [\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"danger\",\n    \"warning\",\n    \"info\",\n    \"light\",\n    \"dark\",\n  ];\n  const [task,setTask] = useState(\"\");\n  const [taskList,setTaskList] = useState([]);\n\n  const addTask = ()=>{\n    let newTaskList = [...taskList];\n    newTaskList.push(task);\n    setTaskList(newTaskList);\n    document.getElementById(\"searchInput\").value=\"\";\n  }\n  const removeTask = (task)=> {\n    let newTaskList = [...taskList];\n    newTaskList = newTaskList.filter(el => el !== task);\n    setTaskList(newTaskList);\n    dispatch(UpdateCompletedTask(task));\n  }\n  useEffect(() => {\n    console.log(taskList)\n  }, [taskList]);\n\n  return (\n    <Container>\n      <Row className=\"heading\">\n        <span>TO DO LIST</span>\n      </Row>\n      <Row className=\"searchBar\">\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            id=\"searchInput\"\n            placeholder=\"ADD TASK\"\n            aria-label=\"ADD TASK\"\n            aria-describedby=\"basic-addon2\"\n            onChange={(e)=>{setTask(e.target.value)}}\n          />\n          <Button variant=\"outline-secondary\" id=\"button-addon2\" onClick={addTask}>\n            ADD\n          </Button>\n        </InputGroup>\n      </Row>\n      <Row>\n        <ListGroup>\n          {taskList &&\n            taskList.map((el,index) => (\n              <ListGroup.Item variant={color[index%7]} onClick={()=>{removeTask(el);}}>{el}</ListGroup.Item>\n            ))}\n        </ListGroup>\n      </Row>\n      <Row>\n        <CompletedList/>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ToDoList;\n","export const UpdateCompletedTask = (task) => {\n  return {\n    type: \"UPDATE COMPLETED TASK\",\n    payload: task,\n  };\n};\n","import './App.css';\nimport ToDoList from './ToDoList.js';\n \nfunction App() {\n  return (\n      <div className=\"App\">\n      <ToDoList> </ToDoList>\n      </div>\n  );\n}\n\nexport default App;\n","const initialState = [];\n\nconst updateCompletedTaskList = (state=initialState,action)=>{\n    switch(action.type){\n        case \"UPDATE COMPLETED TASK\":\n            return [...state,action.payload];\n        default:\n            return state;\n    }\n}\n\nexport default updateCompletedTaskList;","import { combineReducers } from \"redux\";\nimport updateCompletedTaskList from \"./updateCompletedTaskList\";\n\nconst rootReducer = combineReducers({ updateCompletedTaskList });\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducer\";\n\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nstore.subscribe(()=>{console.log(store.getState())});\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}